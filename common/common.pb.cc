// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vipkid {

namespace {

const ::google::protobuf::Descriptor* RouteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRoomUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRoomUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRoomUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRoomUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadCast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadCast_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadCastRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadCastRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeepAlive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeepAlive_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniCast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniCast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BroadCastMessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  RouteMsg_descriptor_ = file->message_type(0);
  static const int RouteMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, rtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, msg_),
  };
  RouteMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteMsg_descriptor_,
      RouteMsg::default_instance_,
      RouteMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteMsg));
  SSHead_descriptor_ = file->message_type(1);
  static const int SSHead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, client_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, client_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, upstream_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, objectid_),
  };
  SSHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSHead_descriptor_,
      SSHead::default_instance_,
      SSHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSHead));
  AddRoomUser_descriptor_ = file->message_type(2);
  static const int AddRoomUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUser, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUser, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUser, nick_),
  };
  AddRoomUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRoomUser_descriptor_,
      AddRoomUser::default_instance_,
      AddRoomUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRoomUser));
  AddRoomUserRsp_descriptor_ = file->message_type(3);
  static const int AddRoomUserRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUserRsp, result_),
  };
  AddRoomUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRoomUserRsp_descriptor_,
      AddRoomUserRsp::default_instance_,
      AddRoomUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoomUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRoomUserRsp));
  BroadCast_descriptor_ = file->message_type(4);
  static const int BroadCast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, nick_),
  };
  BroadCast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadCast_descriptor_,
      BroadCast::default_instance_,
      BroadCast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadCast));
  BroadCastRsp_descriptor_ = file->message_type(5);
  static const int BroadCastRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastRsp, result_),
  };
  BroadCastRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadCastRsp_descriptor_,
      BroadCastRsp::default_instance_,
      BroadCastRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadCastRsp));
  CreateRoom_descriptor_ = file->message_type(6);
  static const int CreateRoom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, groupid_),
  };
  CreateRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoom_descriptor_,
      CreateRoom::default_instance_,
      CreateRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoom));
  CreateRoomRsp_descriptor_ = file->message_type(7);
  static const int CreateRoomRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, result_),
  };
  CreateRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomRsp_descriptor_,
      CreateRoomRsp::default_instance_,
      CreateRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomRsp));
  UserInfo_descriptor_ = file->message_type(8);
  static const int UserInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, star_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, conn_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, conn_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, roomid_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  RoomInfo_descriptor_ = file->message_type(9);
  static const int RoomInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, creator_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, ppt_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, board_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, user_num_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  GetRoomInfo_descriptor_ = file->message_type(10);
  static const int GetRoomInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfo, groupid_),
  };
  GetRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomInfo_descriptor_,
      GetRoomInfo::default_instance_,
      GetRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomInfo));
  GetRoomInfoRsp_descriptor_ = file->message_type(11);
  static const int GetRoomInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, info_),
  };
  GetRoomInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomInfoRsp_descriptor_,
      GetRoomInfoRsp::default_instance_,
      GetRoomInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomInfoRsp));
  GetRoomList_descriptor_ = file->message_type(12);
  static const int GetRoomList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomList, uuid_),
  };
  GetRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomList_descriptor_,
      GetRoomList::default_instance_,
      GetRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomList));
  GetRoomListRsp_descriptor_ = file->message_type(13);
  static const int GetRoomListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp, list_),
  };
  GetRoomListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomListRsp_descriptor_,
      GetRoomListRsp::default_instance_,
      GetRoomListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomListRsp));
  KeepAlive_descriptor_ = file->message_type(14);
  static const int KeepAlive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, groupid_),
  };
  KeepAlive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeepAlive_descriptor_,
      KeepAlive::default_instance_,
      KeepAlive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAlive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeepAlive));
  UniCast_descriptor_ = file->message_type(15);
  static const int UniCast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, to_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, nick_),
  };
  UniCast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniCast_descriptor_,
      UniCast::default_instance_,
      UniCast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniCast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniCast));
  BroadCastMessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteMsg_descriptor_, &RouteMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSHead_descriptor_, &SSHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRoomUser_descriptor_, &AddRoomUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRoomUserRsp_descriptor_, &AddRoomUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadCast_descriptor_, &BroadCast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadCastRsp_descriptor_, &BroadCastRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoom_descriptor_, &CreateRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomRsp_descriptor_, &CreateRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomInfo_descriptor_, &GetRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomInfoRsp_descriptor_, &GetRoomInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomList_descriptor_, &GetRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomListRsp_descriptor_, &GetRoomListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeepAlive_descriptor_, &KeepAlive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniCast_descriptor_, &UniCast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete RouteMsg::default_instance_;
  delete RouteMsg_reflection_;
  delete SSHead::default_instance_;
  delete SSHead_reflection_;
  delete AddRoomUser::default_instance_;
  delete AddRoomUser_reflection_;
  delete AddRoomUserRsp::default_instance_;
  delete AddRoomUserRsp_reflection_;
  delete BroadCast::default_instance_;
  delete BroadCast_reflection_;
  delete BroadCastRsp::default_instance_;
  delete BroadCastRsp_reflection_;
  delete CreateRoom::default_instance_;
  delete CreateRoom_reflection_;
  delete CreateRoomRsp::default_instance_;
  delete CreateRoomRsp_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete GetRoomInfo::default_instance_;
  delete GetRoomInfo_reflection_;
  delete GetRoomInfoRsp::default_instance_;
  delete GetRoomInfoRsp_reflection_;
  delete GetRoomList::default_instance_;
  delete GetRoomList_reflection_;
  delete GetRoomListRsp::default_instance_;
  delete GetRoomListRsp_reflection_;
  delete KeepAlive::default_instance_;
  delete KeepAlive_reflection_;
  delete UniCast::default_instance_;
  delete UniCast_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\006vipkid\"@\n\010RouteMsg\022\013\n\003ri"
    "d\030\001 \001(\014\022\013\n\003uid\030\002 \001(\014\022\r\n\005rtype\030\003 \001(\r\022\013\n\003m"
    "sg\030\004 \001(\014\"\215\001\n\006SSHead\022\017\n\007command\030\001 \001(\r\022\014\n\004"
    "uuid\030\002 \001(\014\022\021\n\tclient_ip\030\003 \001(\r\022\023\n\013client_"
    "port\030\004 \001(\r\022\023\n\013client_type\030\005 \001(\r\022\025\n\rupstr"
    "eam_type\030\006 \001(\r\022\020\n\010objectid\030\007 \001(\r\":\n\013AddR"
    "oomUser\022\014\n\004uuid\030\001 \001(\014\022\017\n\007groupid\030\002 \001(\014\022\014"
    "\n\004nick\030\003 \001(\014\" \n\016AddRoomUserRsp\022\016\n\006result"
    "\030\001 \001(\r\"S\n\tBroadCast\022\014\n\004uuid\030\001 \001(\014\022\017\n\007gro"
    "upid\030\002 \001(\014\022\014\n\004type\030\003 \001(\r\022\013\n\003msg\030\004 \001(\014\022\014\n"
    "\004nick\030\005 \001(\014\"\036\n\014BroadCastRsp\022\016\n\006result\030\001 "
    "\001(\r\"+\n\nCreateRoom\022\014\n\004uuid\030\001 \001(\014\022\017\n\007group"
    "id\030\002 \001(\014\"\037\n\rCreateRoomRsp\022\016\n\006result\030\001 \001("
    "\r\"|\n\010UserInfo\022\014\n\004uuid\030\001 \001(\014\022\014\n\004nick\030\002 \001("
    "\014\022\014\n\004role\030\003 \001(\r\022\020\n\010star_num\030\004 \001(\r\022\021\n\tcon"
    "n_addr\030\005 \001(\014\022\021\n\tconn_port\030\006 \001(\r\022\016\n\006roomi"
    "d\030\007 \001(\014\"\242\001\n\010RoomInfo\022\024\n\014creator_uuid\030\001 \001"
    "(\014\022\017\n\007groupid\030\002 \001(\014\022\022\n\ncreatetime\030\003 \001(\r\022"
    "#\n\tuser_list\030\004 \003(\0132\020.vipkid.UserInfo\022\020\n\010"
    "ppt_page\030\005 \001(\r\022\022\n\nboard_data\030\006 \001(\014\022\020\n\010us"
    "er_num\030\007 \001(\r\",\n\013GetRoomInfo\022\014\n\004uuid\030\001 \001("
    "\014\022\017\n\007groupid\030\002 \001(\014\"@\n\016GetRoomInfoRsp\022\016\n\006"
    "result\030\001 \001(\r\022\036\n\004info\030\002 \001(\0132\020.vipkid.Room"
    "Info\"\033\n\013GetRoomList\022\014\n\004uuid\030\001 \001(\014\"@\n\016Get"
    "RoomListRsp\022\016\n\006result\030\001 \001(\r\022\036\n\004list\030\002 \003("
    "\0132\020.vipkid.RoomInfo\"*\n\tKeepAlive\022\014\n\004uuid"
    "\030\001 \001(\014\022\017\n\007groupid\030\002 \001(\014\"T\n\007UniCast\022\014\n\004uu"
    "id\030\001 \001(\014\022\017\n\007groupid\030\002 \001(\014\022\017\n\007to_uuid\030\003 \001"
    "(\014\022\013\n\003msg\030\004 \001(\014\022\014\n\004nick\030\005 \001(\014*\\\n\024BroadCa"
    "stMessageType\022\014\n\010MSG_CHAT\020\001\022\022\n\016MSG_ENTER"
    "_ROOM\020\002\022\022\n\016MSG_LEAVE_ROOM\020\003\022\016\n\nMSG_START"
    "S\020\004", 1243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  RouteMsg::default_instance_ = new RouteMsg();
  SSHead::default_instance_ = new SSHead();
  AddRoomUser::default_instance_ = new AddRoomUser();
  AddRoomUserRsp::default_instance_ = new AddRoomUserRsp();
  BroadCast::default_instance_ = new BroadCast();
  BroadCastRsp::default_instance_ = new BroadCastRsp();
  CreateRoom::default_instance_ = new CreateRoom();
  CreateRoomRsp::default_instance_ = new CreateRoomRsp();
  UserInfo::default_instance_ = new UserInfo();
  RoomInfo::default_instance_ = new RoomInfo();
  GetRoomInfo::default_instance_ = new GetRoomInfo();
  GetRoomInfoRsp::default_instance_ = new GetRoomInfoRsp();
  GetRoomList::default_instance_ = new GetRoomList();
  GetRoomListRsp::default_instance_ = new GetRoomListRsp();
  KeepAlive::default_instance_ = new KeepAlive();
  UniCast::default_instance_ = new UniCast();
  RouteMsg::default_instance_->InitAsDefaultInstance();
  SSHead::default_instance_->InitAsDefaultInstance();
  AddRoomUser::default_instance_->InitAsDefaultInstance();
  AddRoomUserRsp::default_instance_->InitAsDefaultInstance();
  BroadCast::default_instance_->InitAsDefaultInstance();
  BroadCastRsp::default_instance_->InitAsDefaultInstance();
  CreateRoom::default_instance_->InitAsDefaultInstance();
  CreateRoomRsp::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  GetRoomInfo::default_instance_->InitAsDefaultInstance();
  GetRoomInfoRsp::default_instance_->InitAsDefaultInstance();
  GetRoomList::default_instance_->InitAsDefaultInstance();
  GetRoomListRsp::default_instance_->InitAsDefaultInstance();
  KeepAlive::default_instance_->InitAsDefaultInstance();
  UniCast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* BroadCastMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadCastMessageType_descriptor_;
}
bool BroadCastMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RouteMsg::kRidFieldNumber;
const int RouteMsg::kUidFieldNumber;
const int RouteMsg::kRtypeFieldNumber;
const int RouteMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

RouteMsg::RouteMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RouteMsg::InitAsDefaultInstance() {
}

RouteMsg::RouteMsg(const RouteMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RouteMsg::SharedCtor() {
  _cached_size_ = 0;
  rid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtype_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteMsg::~RouteMsg() {
  SharedDtor();
}

void RouteMsg::SharedDtor() {
  if (rid_ != &::google::protobuf::internal::kEmptyString) {
    delete rid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RouteMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteMsg_descriptor_;
}

const RouteMsg& RouteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RouteMsg* RouteMsg::default_instance_ = NULL;

RouteMsg* RouteMsg::New() const {
  return new RouteMsg;
}

void RouteMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rid()) {
      if (rid_ != &::google::protobuf::internal::kEmptyString) {
        rid_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    rtype_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional bytes uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rtype;
        break;
      }

      // optional uint32 rtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtype_)));
          set_has_rtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RouteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->rid(), output);
  }

  // optional bytes uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uid(), output);
  }

  // optional uint32 rtype = 3;
  if (has_rtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rtype(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RouteMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes rid = 1;
  if (has_rid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rid(), target);
  }

  // optional bytes uid = 2;
  if (has_uid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uid(), target);
  }

  // optional uint32 rtype = 3;
  if (has_rtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rtype(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RouteMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rid());
    }

    // optional bytes uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uid());
    }

    // optional uint32 rtype = 3;
    if (has_rtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtype());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteMsg::MergeFrom(const RouteMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_rtype()) {
      set_rtype(from.rtype());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteMsg::CopyFrom(const RouteMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteMsg::IsInitialized() const {

  return true;
}

void RouteMsg::Swap(RouteMsg* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(uid_, other->uid_);
    std::swap(rtype_, other->rtype_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteMsg_descriptor_;
  metadata.reflection = RouteMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSHead::kCommandFieldNumber;
const int SSHead::kUuidFieldNumber;
const int SSHead::kClientIpFieldNumber;
const int SSHead::kClientPortFieldNumber;
const int SSHead::kClientTypeFieldNumber;
const int SSHead::kUpstreamTypeFieldNumber;
const int SSHead::kObjectidFieldNumber;
#endif  // !_MSC_VER

SSHead::SSHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSHead::InitAsDefaultInstance() {
}

SSHead::SSHead(const SSHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSHead::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0u;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ip_ = 0u;
  client_port_ = 0u;
  client_type_ = 0u;
  upstream_type_ = 0u;
  objectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSHead::~SSHead() {
  SharedDtor();
}

void SSHead::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void SSHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSHead_descriptor_;
}

const SSHead& SSHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SSHead* SSHead::default_instance_ = NULL;

SSHead* SSHead::New() const {
  return new SSHead;
}

void SSHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0u;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    client_ip_ = 0u;
    client_port_ = 0u;
    client_type_ = 0u;
    upstream_type_ = 0u;
    objectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_ip;
        break;
      }

      // optional uint32 client_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
          set_has_client_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_port;
        break;
      }

      // optional uint32 client_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_port_)));
          set_has_client_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_type;
        break;
      }

      // optional uint32 client_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_type_)));
          set_has_client_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upstream_type;
        break;
      }

      // optional uint32 upstream_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upstream_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upstream_type_)));
          set_has_upstream_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_objectid;
        break;
      }

      // optional uint32 objectid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  // optional uint32 client_ip = 3;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_ip(), output);
  }

  // optional uint32 client_port = 4;
  if (has_client_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_port(), output);
  }

  // optional uint32 client_type = 5;
  if (has_client_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_type(), output);
  }

  // optional uint32 upstream_type = 6;
  if (has_upstream_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->upstream_type(), output);
  }

  // optional uint32 objectid = 7;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // optional uint32 client_ip = 3;
  if (has_client_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_ip(), target);
  }

  // optional uint32 client_port = 4;
  if (has_client_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_port(), target);
  }

  // optional uint32 client_type = 5;
  if (has_client_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_type(), target);
  }

  // optional uint32 upstream_type = 6;
  if (has_upstream_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->upstream_type(), target);
  }

  // optional uint32 objectid = 7;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional uint32 client_ip = 3;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_port = 4;
    if (has_client_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_port());
    }

    // optional uint32 client_type = 5;
    if (has_client_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_type());
    }

    // optional uint32 upstream_type = 6;
    if (has_upstream_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upstream_type());
    }

    // optional uint32 objectid = 7;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSHead::MergeFrom(const SSHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_client_port()) {
      set_client_port(from.client_port());
    }
    if (from.has_client_type()) {
      set_client_type(from.client_type());
    }
    if (from.has_upstream_type()) {
      set_upstream_type(from.upstream_type());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSHead::CopyFrom(const SSHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSHead::IsInitialized() const {

  return true;
}

void SSHead::Swap(SSHead* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(uuid_, other->uuid_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(client_port_, other->client_port_);
    std::swap(client_type_, other->client_type_);
    std::swap(upstream_type_, other->upstream_type_);
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSHead_descriptor_;
  metadata.reflection = SSHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRoomUser::kUuidFieldNumber;
const int AddRoomUser::kGroupidFieldNumber;
const int AddRoomUser::kNickFieldNumber;
#endif  // !_MSC_VER

AddRoomUser::AddRoomUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRoomUser::InitAsDefaultInstance() {
}

AddRoomUser::AddRoomUser(const AddRoomUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRoomUser::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRoomUser::~AddRoomUser() {
  SharedDtor();
}

void AddRoomUser::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void AddRoomUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRoomUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRoomUser_descriptor_;
}

const AddRoomUser& AddRoomUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AddRoomUser* AddRoomUser::default_instance_ = NULL;

AddRoomUser* AddRoomUser::New() const {
  return new AddRoomUser;
}

void AddRoomUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRoomUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional bytes nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddRoomUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  // optional bytes nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRoomUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  // optional bytes nick = 3;
  if (has_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRoomUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

    // optional bytes nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRoomUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRoomUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRoomUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRoomUser::MergeFrom(const AddRoomUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRoomUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRoomUser::CopyFrom(const AddRoomUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRoomUser::IsInitialized() const {

  return true;
}

void AddRoomUser::Swap(AddRoomUser* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRoomUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRoomUser_descriptor_;
  metadata.reflection = AddRoomUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRoomUserRsp::kResultFieldNumber;
#endif  // !_MSC_VER

AddRoomUserRsp::AddRoomUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddRoomUserRsp::InitAsDefaultInstance() {
}

AddRoomUserRsp::AddRoomUserRsp(const AddRoomUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddRoomUserRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRoomUserRsp::~AddRoomUserRsp() {
  SharedDtor();
}

void AddRoomUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRoomUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRoomUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRoomUserRsp_descriptor_;
}

const AddRoomUserRsp& AddRoomUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AddRoomUserRsp* AddRoomUserRsp::default_instance_ = NULL;

AddRoomUserRsp* AddRoomUserRsp::New() const {
  return new AddRoomUserRsp;
}

void AddRoomUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRoomUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddRoomUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddRoomUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddRoomUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRoomUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRoomUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRoomUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRoomUserRsp::MergeFrom(const AddRoomUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRoomUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRoomUserRsp::CopyFrom(const AddRoomUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRoomUserRsp::IsInitialized() const {

  return true;
}

void AddRoomUserRsp::Swap(AddRoomUserRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRoomUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRoomUserRsp_descriptor_;
  metadata.reflection = AddRoomUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadCast::kUuidFieldNumber;
const int BroadCast::kGroupidFieldNumber;
const int BroadCast::kTypeFieldNumber;
const int BroadCast::kMsgFieldNumber;
const int BroadCast::kNickFieldNumber;
#endif  // !_MSC_VER

BroadCast::BroadCast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadCast::InitAsDefaultInstance() {
}

BroadCast::BroadCast(const BroadCast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadCast::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadCast::~BroadCast() {
  SharedDtor();
}

void BroadCast::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void BroadCast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadCast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadCast_descriptor_;
}

const BroadCast& BroadCast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BroadCast* BroadCast::default_instance_ = NULL;

BroadCast* BroadCast::New() const {
  return new BroadCast;
}

void BroadCast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    type_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick;
        break;
      }

      // optional bytes nick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes nick = 5;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadCast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes nick = 5;
  if (has_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadCast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes nick = 5;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadCast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadCast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadCast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadCast::MergeFrom(const BroadCast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadCast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCast::CopyFrom(const BroadCast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCast::IsInitialized() const {

  return true;
}

void BroadCast::Swap(BroadCast* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadCast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadCast_descriptor_;
  metadata.reflection = BroadCast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadCastRsp::kResultFieldNumber;
#endif  // !_MSC_VER

BroadCastRsp::BroadCastRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadCastRsp::InitAsDefaultInstance() {
}

BroadCastRsp::BroadCastRsp(const BroadCastRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadCastRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadCastRsp::~BroadCastRsp() {
  SharedDtor();
}

void BroadCastRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadCastRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadCastRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadCastRsp_descriptor_;
}

const BroadCastRsp& BroadCastRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BroadCastRsp* BroadCastRsp::default_instance_ = NULL;

BroadCastRsp* BroadCastRsp::New() const {
  return new BroadCastRsp;
}

void BroadCastRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadCastRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadCastRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadCastRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadCastRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadCastRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadCastRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadCastRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadCastRsp::MergeFrom(const BroadCastRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadCastRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCastRsp::CopyFrom(const BroadCastRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCastRsp::IsInitialized() const {

  return true;
}

void BroadCastRsp::Swap(BroadCastRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadCastRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadCastRsp_descriptor_;
  metadata.reflection = BroadCastRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoom::kUuidFieldNumber;
const int CreateRoom::kGroupidFieldNumber;
#endif  // !_MSC_VER

CreateRoom::CreateRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoom::InitAsDefaultInstance() {
}

CreateRoom::CreateRoom(const CreateRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoom::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoom::~CreateRoom() {
  SharedDtor();
}

void CreateRoom::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoom_descriptor_;
}

const CreateRoom& CreateRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CreateRoom* CreateRoom::default_instance_ = NULL;

CreateRoom* CreateRoom::New() const {
  return new CreateRoom;
}

void CreateRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoom::MergeFrom(const CreateRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoom::CopyFrom(const CreateRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoom::IsInitialized() const {

  return true;
}

void CreateRoom::Swap(CreateRoom* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoom_descriptor_;
  metadata.reflection = CreateRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomRsp::kResultFieldNumber;
#endif  // !_MSC_VER

CreateRoomRsp::CreateRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoomRsp::InitAsDefaultInstance() {
}

CreateRoomRsp::CreateRoomRsp(const CreateRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomRsp::~CreateRoomRsp() {
  SharedDtor();
}

void CreateRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomRsp_descriptor_;
}

const CreateRoomRsp& CreateRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CreateRoomRsp* CreateRoomRsp::default_instance_ = NULL;

CreateRoomRsp* CreateRoomRsp::New() const {
  return new CreateRoomRsp;
}

void CreateRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomRsp::MergeFrom(const CreateRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomRsp::CopyFrom(const CreateRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRsp::IsInitialized() const {

  return true;
}

void CreateRoomRsp::Swap(CreateRoomRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomRsp_descriptor_;
  metadata.reflection = CreateRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUuidFieldNumber;
const int UserInfo::kNickFieldNumber;
const int UserInfo::kRoleFieldNumber;
const int UserInfo::kStarNumFieldNumber;
const int UserInfo::kConnAddrFieldNumber;
const int UserInfo::kConnPortFieldNumber;
const int UserInfo::kRoomidFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0u;
  star_num_ = 0u;
  conn_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conn_port_ = 0u;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (conn_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete conn_addr_;
  }
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    role_ = 0u;
    star_num_ = 0u;
    if (has_conn_addr()) {
      if (conn_addr_ != &::google::protobuf::internal::kEmptyString) {
        conn_addr_->clear();
      }
    }
    conn_port_ = 0u;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // optional bytes nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star_num;
        break;
      }

      // optional uint32 star_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_num_)));
          set_has_star_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_conn_addr;
        break;
      }

      // optional bytes conn_addr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conn_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_conn_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_conn_port;
        break;
      }

      // optional uint32 conn_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conn_port_)));
          set_has_conn_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roomid;
        break;
      }

      // optional bytes roomid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_roomid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->nick(), output);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // optional uint32 star_num = 4;
  if (has_star_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star_num(), output);
  }

  // optional bytes conn_addr = 5;
  if (has_conn_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->conn_addr(), output);
  }

  // optional uint32 conn_port = 6;
  if (has_conn_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->conn_port(), output);
  }

  // optional bytes roomid = 7;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes nick = 2;
  if (has_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick(), target);
  }

  // optional uint32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // optional uint32 star_num = 4;
  if (has_star_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star_num(), target);
  }

  // optional bytes conn_addr = 5;
  if (has_conn_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->conn_addr(), target);
  }

  // optional uint32 conn_port = 6;
  if (has_conn_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->conn_port(), target);
  }

  // optional bytes roomid = 7;
  if (has_roomid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 star_num = 4;
    if (has_star_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_num());
    }

    // optional bytes conn_addr = 5;
    if (has_conn_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->conn_addr());
    }

    // optional uint32 conn_port = 6;
    if (has_conn_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conn_port());
    }

    // optional bytes roomid = 7;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_star_num()) {
      set_star_num(from.star_num());
    }
    if (from.has_conn_addr()) {
      set_conn_addr(from.conn_addr());
    }
    if (from.has_conn_port()) {
      set_conn_port(from.conn_port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(nick_, other->nick_);
    std::swap(role_, other->role_);
    std::swap(star_num_, other->star_num_);
    std::swap(conn_addr_, other->conn_addr_);
    std::swap(conn_port_, other->conn_port_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kCreatorUuidFieldNumber;
const int RoomInfo::kGroupidFieldNumber;
const int RoomInfo::kCreatetimeFieldNumber;
const int RoomInfo::kUserListFieldNumber;
const int RoomInfo::kPptPageFieldNumber;
const int RoomInfo::kBoardDataFieldNumber;
const int RoomInfo::kUserNumFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  creator_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = 0u;
  ppt_page_ = 0u;
  board_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (creator_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (board_data_ != &::google::protobuf::internal::kEmptyString) {
    delete board_data_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creator_uuid()) {
      if (creator_uuid_ != &::google::protobuf::internal::kEmptyString) {
        creator_uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    createtime_ = 0u;
    ppt_page_ = 0u;
    if (has_board_data()) {
      if (board_data_ != &::google::protobuf::internal::kEmptyString) {
        board_data_->clear();
      }
    }
    user_num_ = 0u;
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes creator_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_creator_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_list;
        break;
      }

      // repeated .vipkid.UserInfo user_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_list;
        if (input->ExpectTag(40)) goto parse_ppt_page;
        break;
      }

      // optional uint32 ppt_page = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppt_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ppt_page_)));
          set_has_ppt_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_board_data;
        break;
      }

      // optional bytes board_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_board_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_board_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_num;
        break;
      }

      // optional uint32 user_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_num_)));
          set_has_user_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes creator_uuid = 1;
  if (has_creator_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->creator_uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  // optional uint32 createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->createtime(), output);
  }

  // repeated .vipkid.UserInfo user_list = 4;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_list(i), output);
  }

  // optional uint32 ppt_page = 5;
  if (has_ppt_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ppt_page(), output);
  }

  // optional bytes board_data = 6;
  if (has_board_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->board_data(), output);
  }

  // optional uint32 user_num = 7;
  if (has_user_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->user_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes creator_uuid = 1;
  if (has_creator_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->creator_uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  // optional uint32 createtime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->createtime(), target);
  }

  // repeated .vipkid.UserInfo user_list = 4;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_list(i), target);
  }

  // optional uint32 ppt_page = 5;
  if (has_ppt_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ppt_page(), target);
  }

  // optional bytes board_data = 6;
  if (has_board_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->board_data(), target);
  }

  // optional uint32 user_num = 7;
  if (has_user_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->user_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes creator_uuid = 1;
    if (has_creator_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->creator_uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

    // optional uint32 createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

    // optional uint32 ppt_page = 5;
    if (has_ppt_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ppt_page());
    }

    // optional bytes board_data = 6;
    if (has_board_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->board_data());
    }

    // optional uint32 user_num = 7;
    if (has_user_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_num());
    }

  }
  // repeated .vipkid.UserInfo user_list = 4;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_uuid()) {
      set_creator_uuid(from.creator_uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_ppt_page()) {
      set_ppt_page(from.ppt_page());
    }
    if (from.has_board_data()) {
      set_board_data(from.board_data());
    }
    if (from.has_user_num()) {
      set_user_num(from.user_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(creator_uuid_, other->creator_uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(createtime_, other->createtime_);
    user_list_.Swap(&other->user_list_);
    std::swap(ppt_page_, other->ppt_page_);
    std::swap(board_data_, other->board_data_);
    std::swap(user_num_, other->user_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfo::kUuidFieldNumber;
const int GetRoomInfo::kGroupidFieldNumber;
#endif  // !_MSC_VER

GetRoomInfo::GetRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomInfo::InitAsDefaultInstance() {
}

GetRoomInfo::GetRoomInfo(const GetRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfo::~GetRoomInfo() {
  SharedDtor();
}

void GetRoomInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void GetRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomInfo_descriptor_;
}

const GetRoomInfo& GetRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GetRoomInfo* GetRoomInfo::default_instance_ = NULL;

GetRoomInfo* GetRoomInfo::New() const {
  return new GetRoomInfo;
}

void GetRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomInfo::MergeFrom(const GetRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomInfo::CopyFrom(const GetRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfo::IsInitialized() const {

  return true;
}

void GetRoomInfo::Swap(GetRoomInfo* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomInfo_descriptor_;
  metadata.reflection = GetRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoRsp::kResultFieldNumber;
const int GetRoomInfoRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoRsp::GetRoomInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomInfoRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::vipkid::RoomInfo*>(&::vipkid::RoomInfo::default_instance());
}

GetRoomInfoRsp::GetRoomInfoRsp(const GetRoomInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoRsp::~GetRoomInfoRsp() {
  SharedDtor();
}

void GetRoomInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GetRoomInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomInfoRsp_descriptor_;
}

const GetRoomInfoRsp& GetRoomInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GetRoomInfoRsp* GetRoomInfoRsp::default_instance_ = NULL;

GetRoomInfoRsp* GetRoomInfoRsp::New() const {
  return new GetRoomInfoRsp;
}

void GetRoomInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::vipkid::RoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .vipkid.RoomInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .vipkid.RoomInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .vipkid.RoomInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .vipkid.RoomInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomInfoRsp::MergeFrom(const GetRoomInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::vipkid::RoomInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomInfoRsp::CopyFrom(const GetRoomInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoRsp::IsInitialized() const {

  return true;
}

void GetRoomInfoRsp::Swap(GetRoomInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomInfoRsp_descriptor_;
  metadata.reflection = GetRoomInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomList::kUuidFieldNumber;
#endif  // !_MSC_VER

GetRoomList::GetRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomList::InitAsDefaultInstance() {
}

GetRoomList::GetRoomList(const GetRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomList::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomList::~GetRoomList() {
  SharedDtor();
}

void GetRoomList::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void GetRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomList_descriptor_;
}

const GetRoomList& GetRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GetRoomList* GetRoomList::default_instance_ = NULL;

GetRoomList* GetRoomList::New() const {
  return new GetRoomList;
}

void GetRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomList::MergeFrom(const GetRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomList::CopyFrom(const GetRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomList::IsInitialized() const {

  return true;
}

void GetRoomList::Swap(GetRoomList* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomList_descriptor_;
  metadata.reflection = GetRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomListRsp::kResultFieldNumber;
const int GetRoomListRsp::kListFieldNumber;
#endif  // !_MSC_VER

GetRoomListRsp::GetRoomListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomListRsp::InitAsDefaultInstance() {
}

GetRoomListRsp::GetRoomListRsp(const GetRoomListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomListRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomListRsp::~GetRoomListRsp() {
  SharedDtor();
}

void GetRoomListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomListRsp_descriptor_;
}

const GetRoomListRsp& GetRoomListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

GetRoomListRsp* GetRoomListRsp::default_instance_ = NULL;

GetRoomListRsp* GetRoomListRsp::New() const {
  return new GetRoomListRsp;
}

void GetRoomListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .vipkid.RoomInfo list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated .vipkid.RoomInfo list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated .vipkid.RoomInfo list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated .vipkid.RoomInfo list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomListRsp::MergeFrom(const GetRoomListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomListRsp::CopyFrom(const GetRoomListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListRsp::IsInitialized() const {

  return true;
}

void GetRoomListRsp::Swap(GetRoomListRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomListRsp_descriptor_;
  metadata.reflection = GetRoomListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeepAlive::kUuidFieldNumber;
const int KeepAlive::kGroupidFieldNumber;
#endif  // !_MSC_VER

KeepAlive::KeepAlive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeepAlive::InitAsDefaultInstance() {
}

KeepAlive::KeepAlive(const KeepAlive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeepAlive::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeepAlive::~KeepAlive() {
  SharedDtor();
}

void KeepAlive::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void KeepAlive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAlive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeepAlive_descriptor_;
}

const KeepAlive& KeepAlive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

KeepAlive* KeepAlive::default_instance_ = NULL;

KeepAlive* KeepAlive::New() const {
  return new KeepAlive;
}

void KeepAlive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeepAlive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeepAlive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeepAlive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeepAlive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAlive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeepAlive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeepAlive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeepAlive::MergeFrom(const KeepAlive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeepAlive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive::IsInitialized() const {

  return true;
}

void KeepAlive::Swap(KeepAlive* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeepAlive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeepAlive_descriptor_;
  metadata.reflection = KeepAlive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniCast::kUuidFieldNumber;
const int UniCast::kGroupidFieldNumber;
const int UniCast::kToUuidFieldNumber;
const int UniCast::kMsgFieldNumber;
const int UniCast::kNickFieldNumber;
#endif  // !_MSC_VER

UniCast::UniCast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UniCast::InitAsDefaultInstance() {
}

UniCast::UniCast(const UniCast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UniCast::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniCast::~UniCast() {
  SharedDtor();
}

void UniCast::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (to_uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete to_uuid_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void UniCast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniCast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniCast_descriptor_;
}

const UniCast& UniCast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UniCast* UniCast::default_instance_ = NULL;

UniCast* UniCast::New() const {
  return new UniCast;
}

void UniCast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_to_uuid()) {
      if (to_uuid_ != &::google::protobuf::internal::kEmptyString) {
        to_uuid_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupid;
        break;
      }

      // optional bytes groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_uuid;
        break;
      }

      // optional bytes to_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }

      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick;
        break;
      }

      // optional bytes nick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UniCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->groupid(), output);
  }

  // optional bytes to_uuid = 3;
  if (has_to_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->to_uuid(), output);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }

  // optional bytes nick = 5;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UniCast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes uuid = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }

  // optional bytes groupid = 2;
  if (has_groupid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->groupid(), target);
  }

  // optional bytes to_uuid = 3;
  if (has_to_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->to_uuid(), target);
  }

  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // optional bytes nick = 5;
  if (has_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UniCast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bytes groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->groupid());
    }

    // optional bytes to_uuid = 3;
    if (has_to_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->to_uuid());
    }

    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional bytes nick = 5;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniCast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniCast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniCast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniCast::MergeFrom(const UniCast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_to_uuid()) {
      set_to_uuid(from.to_uuid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniCast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniCast::CopyFrom(const UniCast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniCast::IsInitialized() const {

  return true;
}

void UniCast::Swap(UniCast* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(groupid_, other->groupid_);
    std::swap(to_uuid_, other->to_uuid_);
    std::swap(msg_, other->msg_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniCast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniCast_descriptor_;
  metadata.reflection = UniCast_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vipkid

// @@protoc_insertion_point(global_scope)
